/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Auth Token
         * @description Create an auth and refresh tokens.
         *     All API requests must provide the Bearer auth token in Authorization header
         */
        post: operations["AccessTokenCreate"];
        /**
         * Delete Auth Token
         * @description Delete the authentication token cookie.
         */
        delete: operations["delete_auth_token_api_auth_token_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Auth Token
         * @description Receive a new authentication token using the refresh token.
         */
        post: operations["refresh_auth_token_api_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Password
         * @description Change the current user's password.
         *     Applicable only for local users.
         */
        post: operations["change_password_api_auth_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description Get a list of all users.
         */
        get: operations["list_users_api_users_get"];
        put?: never;
        /**
         * Add User
         * @description Add a new user.
         *
         *     Password attributes are required only for the local authentication provider.
         */
        post: operations["add_user_api_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get information about current user.
         */
        get: operations["get_current_user_api_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Get a specific user by their UUID.
         */
        get: operations["get_user_api_users__id__get"];
        /**
         * Update User
         * @description Update a specific user.
         *
         *     Password attributes are required only for the local authentication provider.
         *     User can't modify this own account
         */
        put: operations["update_user_api_users__id__put"];
        post?: never;
        /**
         * Delete User
         * @description Delete a specific user by their UUID.
         */
        delete: operations["delete_user_api_users__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Roles
         * @description Get a list of all roles.
         */
        get: operations["list_roles_api_roles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Role
         * @description Get a specific Role by their UUID.
         */
        get: operations["get_role_api_roles__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Providers
         * @description Get a list of all identity providers.
         */
        get: operations["list_providers_api_providers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/local": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Providers Local
         * @description Get a list of all LOCAL identity providers.
         */
        get: operations["list_providers_local_api_providers_local_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/local/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Provider Local
         * @description Get a specific LOCAL Identity Provider by their UUID.
         */
        get: operations["get_provider_local_api_providers_local__id__get"];
        /**
         * Update Provider Local
         * @description Update a specific LOCAL Identity Provider.
         */
        put: operations["update_provider_local_api_providers_local__id__put"];
        post?: never;
        /**
         * Delete Provider Local
         * @description Delete a specific LOCAL Identity Provider by their UUID.
         */
        delete: operations["delete_provider_local_api_providers_local__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/ldap/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Provider Ldap
         * @description Check if identity provider is functional.
         *
         *     There are three options to validate a provider:
         *     1. Only ID - Check if the provider in the database is valid.
         *     2. Only config - Check if the provider you are trying to create is valid.
         *     3. ID and config - Check if the provider existing in the database that you are trying to update is valid.
         *
         *     Third method will use the password in the database (if a new password is not provided) to validate the identity provider.
         */
        post: operations["IdentityProviderLdapValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/ldap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Providers Ldap
         * @description Get a list of all LDAP identity providers.
         */
        get: operations["list_providers_ldap_api_providers_ldap_get"];
        put?: never;
        /**
         * Add Providers Ldap
         * @description Add a new LDAP Identity Provider.
         */
        post: operations["add_providers_ldap_api_providers_ldap_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/ldap/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Provider Ldap
         * @description Get a specific LDAP Identity Provider by their UUID.
         */
        get: operations["get_provider_ldap_api_providers_ldap__id__get"];
        /**
         * Update Provider Ldap
         * @description Update a specific LDAP Identity Provider.
         */
        put: operations["update_provider_ldap_api_providers_ldap__id__put"];
        post?: never;
        /**
         * Delete Provider Ldap
         * @description Delete a specific LDAP identity Provider by their UUID.
         */
        delete: operations["delete_provider_ldap_api_providers_ldap__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get State
         * @description Describe the general state of the app without exposing critical information
         */
        get: operations["get_state_api_settings_state_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/general": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get General Settings
         * @description Retrieve general settings.
         */
        get: operations["get_general_settings_api_settings_general_get"];
        /**
         * Update General Settings
         * @description Update general settings.
         */
        put: operations["update_general_settings_api_settings_general_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/security": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Security Settings
         * @description Retrieve security settings.
         */
        get: operations["get_security_settings_api_settings_security_get"];
        /**
         * Update Security Settings
         * @description Update security settings.
         */
        put: operations["update_security_settings_api_settings_security_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/setup/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * State
         * @description Get current Setup state
         */
        get: operations["state_api_setup_state_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/setup/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup User
         * @description Create Initial App Admin User
         */
        post: operations["setup_user_api_setup_user_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sync Assets
         * @description Trigger an immediate asset synchronization for the given data source.
         *
         *     Does not wait for the synchronization to complete.
         */
        get: operations["sync_assets_api_data_sources_sync_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Datasources
         * @description Get a list of all data sources.
         */
        get: operations["list_datasources_api_data_sources_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/aria_logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Aria Logs
         * @description Get a list of Vmware Aria Operations for logs data sources.
         */
        get: operations["list_aria_logs_api_data_sources_aria_logs_get"];
        put?: never;
        /**
         * Add Aria Logs
         * @description Add a new Vmware Aria Operations for logs data source.
         */
        post: operations["add_aria_logs_api_data_sources_aria_logs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/aria_logs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Aria Logs
         * @description Get a specific Vmware Aria Operations for logs data source by their UUID.
         */
        get: operations["get_aria_logs_api_data_sources_aria_logs__id__get"];
        /**
         * Update Aria Logs
         * @description Update a specific Vmware Aria Operations for logs data source.
         */
        put: operations["update_aria_logs_api_data_sources_aria_logs__id__put"];
        post?: never;
        /**
         * Delete Aria Logs
         * @description Delete a specific Vmware Aria Operations for logs data source by their UUID.
         */
        delete: operations["delete_aria_logs_api_data_sources_aria_logs__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/aria_logs/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Aria Logs
         * @description Check if data source is functional.
         *
         *     There are two options to validate a data source:
         *     1. Only ID - Check if the source in the database is valid.
         *     2. Only config - Check if the source you are trying to create is valid.
         */
        post: operations["DataSourceAriaLogsValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/aria_networks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Aria Networks
         * @description Get a list of Vmware Aria Operations for Networks data sources.
         */
        get: operations["list_aria_networks_api_data_sources_aria_networks_get"];
        put?: never;
        /**
         * Add Aria Networks
         * @description Add a new Vmware Aria Operations for Networks data source.
         */
        post: operations["add_aria_networks_api_data_sources_aria_networks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/aria_networks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Aria Networks
         * @description Get a specific Vmware Aria Operations for Networks data source by their UUID.
         */
        get: operations["get_aria_networks_api_data_sources_aria_networks__id__get"];
        /**
         * Update Aria Networks
         * @description Update a specific Vmware Aria Operations for Networks data source.
         */
        put: operations["update_aria_networks_api_data_sources_aria_networks__id__put"];
        post?: never;
        /**
         * Delete Aria Networks
         * @description Delete a specific Vmware Aria Operations for Networks data source by their UUID.
         */
        delete: operations["delete_aria_networks_api_data_sources_aria_networks__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/aria_networks/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Aria Networks
         * @description Check if data source is functional.
         *
         *     There are two options to validate a data source:
         *     1. Only ID - Check if the source in the database is valid.
         *     2. Only config - Check if the source you are trying to create is valid.
         */
        post: operations["DataSourceAriaNetworksValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/vmware_nsx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Vmware Nsx
         * @description Get a list of Vmware NSX-T data sources.
         */
        get: operations["list_vmware_nsx_api_data_sources_vmware_nsx_get"];
        put?: never;
        /**
         * Add Vmware Nsx
         * @description Add a new Vmware NSX-T data source.
         */
        post: operations["add_vmware_nsx_api_data_sources_vmware_nsx_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/vmware_nsx/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vmware Nsx
         * @description Get a specific Vmware NSX-T data source by their UUID.
         */
        get: operations["get_vmware_nsx_api_data_sources_vmware_nsx__id__get"];
        /**
         * Update Vmware Nsx
         * @description Update a specific Vmware NSX-T data source.
         */
        put: operations["update_vmware_nsx_api_data_sources_vmware_nsx__id__put"];
        post?: never;
        /**
         * Delete Vmware Nsx
         * @description Delete a specific Vmware NSX-T data source by their UUID.
         */
        delete: operations["delete_vmware_nsx_api_data_sources_vmware_nsx__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/vmware_nsx/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Vmware Nsx
         * @description Check if data source is functional.
         *
         *     There are two options to validate a data source:
         *     1. Only ID - Check if the source in the database is valid.
         *     2. Only config - Check if the source you are trying to create is valid.
         */
        post: operations["DataSourceVmwareNSXValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/vmware_vcenter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Vmware Vcenter
         * @description Get a list of Vmware vCenter data sources.
         */
        get: operations["list_vmware_vcenter_api_data_sources_vmware_vcenter_get"];
        put?: never;
        /**
         * Add Vmware Vcenter
         * @description Add a new Vmware vCenter data source.
         */
        post: operations["add_vmware_vcenter_api_data_sources_vmware_vcenter_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/vmware_vcenter/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vmware Vcenter
         * @description Get a specific Vmware vCenter data source by their UUID.
         */
        get: operations["get_vmware_vcenter_api_data_sources_vmware_vcenter__id__get"];
        /**
         * Update Vmware Vcenter
         * @description Update a specific Vmware vCenter data source.
         */
        put: operations["update_vmware_vcenter_api_data_sources_vmware_vcenter__id__put"];
        post?: never;
        /**
         * Delete Vmware Vcenter
         * @description Delete a specific Vmware vCenter data source by their UUID.
         */
        delete: operations["delete_vmware_vcenter_api_data_sources_vmware_vcenter__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/vmware_vcenter/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Vmware Vcenter
         * @description Check if data source is functional.
         *
         *     There are two options to validate a data source:
         *     1. Only ID - Check if the source in the database is valid.
         *     2. Only config - Check if the source you are trying to create is valid.
         */
        post: operations["DataSourceVmwareVCenterValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/demo/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Demo
         * @description Get a specific Demo data source by their UUID.
         */
        get: operations["get_demo_api_data_sources_demo__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/ivanti_itsm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Ivanti Itsm
         * @description Get a list of Ivanti ITSM data sources.
         */
        get: operations["list_ivanti_itsm_api_data_sources_ivanti_itsm_get"];
        put?: never;
        /**
         * Add Ivanti Itsm
         * @description Add a new Ivanti ITSM data source.
         */
        post: operations["add_ivanti_itsm_api_data_sources_ivanti_itsm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/ivanti_itsm/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ivanti Itsm
         * @description Get a specific Ivanti ITSM data source by their UUID.
         */
        get: operations["get_ivanti_itsm_api_data_sources_ivanti_itsm__id__get"];
        /**
         * Update Ivanti Itsm
         * @description Update a specific Ivanti ITSM data source.
         */
        put: operations["update_ivanti_itsm_api_data_sources_ivanti_itsm__id__put"];
        post?: never;
        /**
         * Delete Ivanti Itsm
         * @description Delete a specific Ivanti ITSM data source by their UUID.
         */
        delete: operations["delete_ivanti_itsm_api_data_sources_ivanti_itsm__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/ivanti_itsm/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Ivanti Itsm
         * @description Check if data source is functional.
         *
         *     There are two options to validate a data source:
         *     1. Only ID - Check if the source in the database is valid.
         *     2. Only config - Check if the source you are trying to create is valid.
         */
        post: operations["DataSourceIvantiITSMValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/qradar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Qradar
         * @description Get a list of IBM QRadar data sources.
         */
        get: operations["list_qradar_api_data_sources_qradar_get"];
        put?: never;
        /**
         * Add Qradar
         * @description Add a new IBM QRadar data source.
         */
        post: operations["add_qradar_api_data_sources_qradar_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/qradar/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Qradar
         * @description Get a specific IBM QRadar data source by their UUID.
         */
        get: operations["get_qradar_api_data_sources_qradar__id__get"];
        /**
         * Update Qradar
         * @description Update a specific IBM QRadar data source.
         */
        put: operations["update_qradar_api_data_sources_qradar__id__put"];
        post?: never;
        /**
         * Delete Qradar
         * @description Delete a specific IBM QRadar data source by their UUID.
         */
        delete: operations["delete_qradar_api_data_sources_qradar__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data_sources/qradar/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Qradar
         * @description Check if data source is functional.
         *
         *     There are two options to validate a data source:
         *     1. Only ID - Check if the source in the database is valid.
         *     2. Only config - Check if the source you are trying to create is valid.
         */
        post: operations["DataSourceQRadarValidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/credential_profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Credential Profiles
         * @description Get a list of credential profiles.
         */
        get: operations["list_credential_profiles_api_credential_profiles_get"];
        put?: never;
        /**
         * Add Credential Profile
         * @description Add a new Credential Profile.
         */
        post: operations["add_credential_profile_api_credential_profiles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/credential_profiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Credential Profile
         * @description Get a specific Credential Profile by their UUID.
         */
        get: operations["get_credential_profile_api_credential_profiles__id__get"];
        /**
         * Update Credential Profile
         * @description Update a specific Credential Profile.
         */
        put: operations["update_credential_profile_api_credential_profiles__id__put"];
        post?: never;
        /**
         * Delete Credential Profile
         * @description Delete a specific Credential Profile by their UUID.
         */
        delete: operations["delete_credential_profile_api_credential_profiles__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logs Search
         * @description Search for logs based on the provided query.
         */
        post: operations["logs_search_api_logs_search_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs/sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Log Sources
         * @description Returns list of log sources that are capable of log search.
         */
        get: operations["log_sources_api_logs_sources_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/hosts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Hosts
         * @description Get a list hosts.
         */
        get: operations["get_hosts_api_assets_hosts_get"];
        put?: never;
        /**
         * Add Host
         * @description Add a new host asset.
         */
        post: operations["add_host_api_assets_hosts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/hosts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Host
         * @description Get a specific host by their UUID.
         */
        get: operations["get_host_api_assets_hosts__id__get"];
        /**
         * Update Host
         * @description Update a specific host identified by its UUID.
         */
        put: operations["update_host_api_assets_hosts__id__put"];
        post?: never;
        /**
         * Delete Host
         * @description Delete a specific host identified by its UUID.
         */
        delete: operations["delete_host_api_assets_hosts__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/firewall_rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Firewall Rules
         * @description Get a list firewall rules.
         */
        get: operations["get_firewall_rules_api_assets_firewall_rules_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/firewall_rules/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Firewall Rule
         * @description Get a specific firewall rule by their UUID.
         */
        get: operations["get_firewall_rule_api_assets_firewall_rules__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/networks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Networks
         * @description Get a list of Networks.
         */
        get: operations["list_networks_api_assets_networks_get"];
        put?: never;
        /**
         * Add Network
         * @description Add a new Network Asset.
         */
        post: operations["add_network_api_assets_networks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/networks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network
         * @description Get a specific network identified by its UUID.
         */
        get: operations["get_network_api_assets_networks__id__get"];
        /**
         * Update Network
         * @description Update a specific network identified by its UUID.
         */
        put: operations["update_network_api_assets_networks__id__put"];
        post?: never;
        /**
         * Delete Network
         * @description Delete a specific network identified by its UUID.
         */
        delete: operations["delete_network_api_assets_networks__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Services
         * @description Get a list of services.
         */
        get: operations["list_services_api_assets_services_get"];
        put?: never;
        /**
         * Add Service
         * @description Add a new service Asset.
         */
        post: operations["add_service_api_assets_services_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/services/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Service
         * @description Get a specific service identified by its UUID.
         */
        get: operations["get_service_api_assets_services__id__get"];
        /**
         * Update Service
         * @description Update a specific service identified by its UUID.
         */
        put: operations["update_service_api_assets_services__id__put"];
        post?: never;
        /**
         * Delete Service
         * @description Delete a specific service identified by its UUID.
         */
        delete: operations["delete_service_api_assets_services__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description Get a list of users.
         *
         *     These users are considered assets and do not count as application users.
         */
        get: operations["list_users_api_assets_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Get a specific user identified by its UUID.
         *
         *     This user is considered asset and does not count as application user.
         */
        get: operations["get_user_api_assets_users__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/references": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resolve References
         * @description Resolve a list of asset references into detailed entity information.
         */
        post: operations["resolve_references_api_assets_references_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Metrics
         * @description Retrieve task metrics
         */
        get: operations["get_task_metrics_api_metrics_tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/tasks_queue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Queue
         * @description Retrieve the task queue metrics.
         */
        get: operations["get_task_queue_api_metrics_tasks_queue_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Activity Metrics
         * @description Retrieve the activity metrics. Activity patterns of the application users
         */
        get: operations["get_activity_metrics_api_metrics_activity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AccessToken
         * @description Model representing an API access token.
         */
        AccessToken: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /**
         * AssetFirewallRuleResponse
         * @description API response model for firewall rule.
         */
        AssetFirewallRuleResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Rule Id */
            rule_id: string;
            /**
             * Source Zones
             * @default []
             */
            source_zones: components["schemas"]["FirewallRuleEntity"][];
            /**
             * Destination Zones
             * @default []
             */
            destination_zones: components["schemas"]["FirewallRuleEntity"][];
            /**
             * Source Interfaces
             * @default []
             */
            source_interfaces: components["schemas"]["FirewallRuleEntity"][];
            /**
             * Destination Interfaces
             * @default []
             */
            destination_interfaces: components["schemas"]["FirewallRuleEntity"][];
            /**
             * Sources
             * @default []
             */
            sources: components["schemas"]["FirewallRuleEntity"][];
            /**
             * Destinations
             * @default []
             */
            destinations: components["schemas"]["FirewallRuleEntity"][];
            /**
             * Services
             * @default []
             */
            services: components["schemas"]["FirewallRuleEntity"][];
            /** Action */
            action: string;
            /**
             * Is Source Inverted
             * @default false
             */
            is_source_inverted: boolean;
            /**
             * Is Destination Inverted
             * @default false
             */
            is_destination_inverted: boolean;
            /** Direction */
            direction?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "firewall_rule";
            /** Source Identifier */
            source_identifier: string;
            /** Source Identifier Alt */
            source_identifier_alt?: string | null;
            /**
             * Data Source Id
             * Format: uuid
             */
            data_source_id: string;
            /** Manager */
            manager?: string | null;
        };
        /**
         * AssetHostCreate
         * @description Data model for creating new Host entity.
         */
        AssetHostCreate: {
            /** Ip */
            ip: string;
            /**
             * Vrf
             * @default
             */
            vrf: string;
            /** Domain */
            domain?: string | null;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Note */
            note?: string | null;
            /** Mac Address */
            mac_address?: string | null;
            /** Vendor */
            vendor?: string | null;
            /** Owner */
            owner?: string | null;
            /**
             * Entity Type
             * @default host
             * @constant
             * @enum {string}
             */
            entity_type: "host";
            /**
             * Is Vm
             * @default false
             */
            is_vm: boolean;
            /**
             * References
             * @default []
             */
            references: components["schemas"]["AssetHostReferenceCreate"][];
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
        };
        /** AssetHostReference */
        AssetHostReference: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Host Id
             * Format: uuid
             */
            host_id: string;
            /** Source Identifier */
            source_identifier: string;
            /**
             * Data Source Id
             * Format: uuid
             */
            data_source_id: string;
        };
        /** AssetHostReferenceCreate */
        AssetHostReferenceCreate: {
            /** Host Id */
            host_id?: string | null;
            /** Source Identifier */
            source_identifier: string;
            /**
             * Data Source Id
             * Format: uuid
             */
            data_source_id: string;
        };
        /**
         * AssetHostResponse
         * @description API response model for asset Host.
         */
        AssetHostResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Ip */
            ip: string;
            /**
             * Vrf
             * @default
             */
            vrf: string;
            /** Domain */
            domain?: string | null;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Note */
            note?: string | null;
            /** Mac Address */
            mac_address?: string | null;
            /** Vendor */
            vendor?: string | null;
            /** Owner */
            owner?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "host";
            /**
             * Is Vm
             * @default false
             */
            is_vm: boolean;
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
            /**
             * Is Modified By User
             * @default false
             */
            is_modified_by_user: boolean;
            /**
             * References
             * @default []
             */
            references: components["schemas"]["AssetHostReference"][];
        };
        /**
         * AssetHostUpdate
         * @description Data model for updating asset host information.
         */
        AssetHostUpdate: {
            /** Ip */
            ip?: string | null;
            /**
             * Vrf
             * @default
             */
            vrf: string;
            /** Domain */
            domain?: string | null;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Note */
            note?: string | null;
            /** Mac Address */
            mac_address?: string | null;
            /** Vendor */
            vendor?: string | null;
            /** Owner */
            owner?: string | null;
            /**
             * Entity Type
             * @default host
             * @constant
             * @enum {string}
             */
            entity_type: "host";
            /**
             * Is Vm
             * @default false
             */
            is_vm: boolean;
            /**
             * References
             * @default []
             */
            references: components["schemas"]["AssetHostReferenceCreate"][];
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
        };
        /**
         * AssetNetworkCreate
         * @description Data model for creating asset network.
         */
        AssetNetworkCreate: {
            /**
             * Cidr
             * Format: ipvanynetwork
             */
            cidr: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Location */
            location?: string | null;
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
        };
        /**
         * AssetNetworkResponse
         * @description API response model for asset network.
         */
        AssetNetworkResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Cidr
             * Format: ipvanynetwork
             */
            cidr: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Location */
            location?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "network";
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
            /**
             * Is Modified By User
             * @default false
             */
            is_modified_by_user: boolean;
        };
        /**
         * AssetNetworkUpdate
         * @description Data model for updating asset network information.
         */
        AssetNetworkUpdate: {
            /**
             * Cidr
             * Format: ipvanynetwork
             */
            cidr: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Location */
            location?: string | null;
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
        };
        /**
         * AssetServiceCreate
         * @description Data model for creating asset service.
         */
        AssetServiceCreate: {
            /** Port */
            port: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Protocol */
            protocol?: string | null;
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
        };
        /**
         * AssetServiceResponse
         * @description API response model for asset service.
         */
        AssetServiceResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Port */
            port: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Protocol */
            protocol?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "service";
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
            /**
             * Is Modified By User
             * @default false
             */
            is_modified_by_user: boolean;
        };
        /**
         * AssetServiceUpdate
         * @description Data model for updating asset service information.
         */
        AssetServiceUpdate: {
            /** Port */
            port: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Protocol */
            protocol?: string | null;
            /**
             * Confidence Score
             * @default 0.5
             */
            confidence_score: number;
        };
        /**
         * AssetUserResponse
         * @description API output model for asset user.
         */
        AssetUserResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Department */
            department?: string | null;
            /** Address */
            address?: string | null;
            /** Telephone Number */
            telephone_number?: string | null;
            /** Manager */
            manager?: string | null;
            /** Job Title */
            job_title?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Upn
             * @description User Principal Name
             */
            upn?: string | null;
            /**
             * Samaccountname
             * @description SAM Account Name
             */
            samaccountname?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "asset_user";
        };
        /** Body_AccessTokenCreate */
        Body_AccessTokenCreate: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
        };
        /** Body_DataSourceAriaLogsValidate */
        Body_DataSourceAriaLogsValidate: {
            config?: components["schemas"]["DataSourceAriaLogsCreate"] | null;
            /** Item Id */
            item_id?: string | null;
        };
        /** Body_DataSourceAriaNetworksValidate */
        Body_DataSourceAriaNetworksValidate: {
            config?: components["schemas"]["DataSourceAriaNetworksCreate"] | null;
            /** Item Id */
            item_id?: string | null;
        };
        /** Body_DataSourceIvantiITSMValidate */
        Body_DataSourceIvantiITSMValidate: {
            config?: components["schemas"]["DataSourceIvantiITSMCreate"] | null;
            /** Item Id */
            item_id?: string | null;
        };
        /** Body_DataSourceQRadarValidate */
        Body_DataSourceQRadarValidate: {
            config?: components["schemas"]["DataSourceQRadarCreate"] | null;
            /** Item Id */
            item_id?: string | null;
        };
        /** Body_DataSourceVmwareNSXValidate */
        Body_DataSourceVmwareNSXValidate: {
            config?: components["schemas"]["DataSourceVmwareNSXCreate"] | null;
            /** Item Id */
            item_id?: string | null;
        };
        /** Body_DataSourceVmwareVCenterValidate */
        Body_DataSourceVmwareVCenterValidate: {
            config?: components["schemas"]["DataSourceVmwareVCenterCreate"] | null;
            /** Item Id */
            item_id?: string | null;
        };
        /** Body_IdentityProviderLdapValidate */
        Body_IdentityProviderLdapValidate: {
            /** Item Id */
            item_id?: string | null;
            config?: components["schemas"]["IdentityProviderLdapCreate"] | null;
        };
        /**
         * CredentialProfileCreate
         * @description Data model for creating Credential Profile.
         */
        CredentialProfileCreate: {
            /** Name */
            name: string;
            /** Username */
            username?: string | null;
            /** Description */
            description?: string | null;
            /** Password */
            password?: string | null;
            /** Entity Type */
            entity_type?: string | null;
            /** Token */
            token?: string | null;
            /** Domain */
            domain?: string | null;
        };
        /**
         * CredentialProfileResponse
         * @description API output model for Credential Profile.
         */
        CredentialProfileResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Username */
            username?: string | null;
            /** Description */
            description?: string | null;
            /** Password */
            password?: string | null;
            /** Entity Type */
            entity_type?: string | null;
            /** Token */
            token?: string | null;
            /** Domain */
            domain?: string | null;
        };
        /**
         * CredentialProfileUpdate
         * @description Data model for updating Credential Profile.
         */
        CredentialProfileUpdate: {
            /** Name */
            name: string;
            /** Username */
            username?: string | null;
            /** Description */
            description?: string | null;
            /** Password */
            password?: string | null;
            /** Entity Type */
            entity_type?: string | null;
            /** Token */
            token?: string | null;
            /** Domain */
            domain?: string | null;
        };
        /**
         * DataSourceAriaLogsCreate
         * @description Data model for creating VMware Aria Operations for Logs.
         */
        DataSourceAriaLogsCreate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default true
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceAriaLogsResponse
         * @description API output model for VMware Aria Operations for Logs.
         */
        DataSourceAriaLogsResponse: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "aria_logs";
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Is Assets Supported
             * @description Whatever this data source supports asset collecting
             * @default false
             */
            is_assets_supported: boolean;
            /**
             * Is Logs Supported
             * @description Whatever this data source supports log fetching
             * @default false
             */
            is_logs_supported: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
            credential_profile?: components["schemas"]["CredentialProfileResponse"] | null;
        };
        /**
         * DataSourceAriaLogsUpdate
         * @description Data model for updating VMware Aria Operations for Logs.
         */
        DataSourceAriaLogsUpdate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default false
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceAriaNetworksCreate
         * @description Data model for creating VMware Aria Operations for Networks.
         */
        DataSourceAriaNetworksCreate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default true
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceAriaNetworksResponse
         * @description API output model for VMware Aria Operations for Networks.
         */
        DataSourceAriaNetworksResponse: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "aria_networks";
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Is Assets Supported
             * @description Whatever this data source supports asset collecting
             * @default false
             */
            is_assets_supported: boolean;
            /**
             * Is Logs Supported
             * @description Whatever this data source supports log fetching
             * @default false
             */
            is_logs_supported: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
            credential_profile?: components["schemas"]["CredentialProfileResponse"] | null;
        };
        /**
         * DataSourceAriaNetworksUpdate
         * @description Data model for updating VMware Aria Operations for Networks.
         */
        DataSourceAriaNetworksUpdate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default false
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceDemoResponse
         * @description API output model for Demo Data Source.
         */
        DataSourceDemoResponse: {
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "demo";
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Is Assets Supported
             * @description Whatever this data source supports asset collecting
             * @default false
             */
            is_assets_supported: boolean;
            /**
             * Is Logs Supported
             * @description Whatever this data source supports log fetching
             * @default false
             */
            is_logs_supported: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
            credential_profile?: components["schemas"]["CredentialProfileResponse"] | null;
        };
        /**
         * DataSourceIvantiITSMCreate
         * @description Data model for creating Ivanti ITSM.
         */
        DataSourceIvantiITSMCreate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default true
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceIvantiITSMResponse
         * @description API output model for Ivanti ITSM.
         */
        DataSourceIvantiITSMResponse: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "ivanti_itsm";
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Is Assets Supported
             * @description Whatever this data source supports asset collecting
             * @default false
             */
            is_assets_supported: boolean;
            /**
             * Is Logs Supported
             * @description Whatever this data source supports log fetching
             * @default false
             */
            is_logs_supported: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
            credential_profile?: components["schemas"]["CredentialProfileResponse"] | null;
        };
        /**
         * DataSourceIvantiITSMUpdate
         * @description Data model for updating Ivanti ITSM.
         */
        DataSourceIvantiITSMUpdate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default false
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceQRadarCreate
         * @description Data model for creating IBM QRadar.
         */
        DataSourceQRadarCreate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default true
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceQRadarResponse
         * @description API output model for IBM QRadar.
         */
        DataSourceQRadarResponse: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "qradar";
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Is Assets Supported
             * @description Whatever this data source supports asset collecting
             * @default false
             */
            is_assets_supported: boolean;
            /**
             * Is Logs Supported
             * @description Whatever this data source supports log fetching
             * @default false
             */
            is_logs_supported: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
            credential_profile?: components["schemas"]["CredentialProfileResponse"] | null;
        };
        /**
         * DataSourceQRadarUpdate
         * @description Data model for updating IBM QRadar.
         */
        DataSourceQRadarUpdate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Is Log Fetching Enabled
             * @default true
             */
            is_log_fetching_enabled: boolean;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default false
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceVmwareNSXCreate
         * @description Data model for creating Vmware NSX-T.
         */
        DataSourceVmwareNSXCreate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default true
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceVmwareNSXResponse
         * @description API output model for Vmware NSX-T.
         */
        DataSourceVmwareNSXResponse: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "vmware_nsx";
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Is Assets Supported
             * @description Whatever this data source supports asset collecting
             * @default false
             */
            is_assets_supported: boolean;
            /**
             * Is Logs Supported
             * @description Whatever this data source supports log fetching
             * @default false
             */
            is_logs_supported: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
            credential_profile?: components["schemas"]["CredentialProfileResponse"] | null;
        };
        /**
         * DataSourceVmwareNSXUpdate
         * @description Data model for updating Vmware NSX-T.
         */
        DataSourceVmwareNSXUpdate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default false
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceVmwareVCenterCreate
         * @description Data model for creating Vmware vCenter.
         */
        DataSourceVmwareVCenterCreate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default true
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * DataSourceVmwareVCenterResponse
         * @description API output model for Vmware vCenter.
         */
        DataSourceVmwareVCenterResponse: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "vmware_vcenter";
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Is Assets Supported
             * @description Whatever this data source supports asset collecting
             * @default false
             */
            is_assets_supported: boolean;
            /**
             * Is Logs Supported
             * @description Whatever this data source supports log fetching
             * @default false
             */
            is_logs_supported: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
            credential_profile?: components["schemas"]["CredentialProfileResponse"] | null;
        };
        /**
         * DataSourceVmwareVCenterUpdate
         * @description Data model for updating Vmware vCenter.
         */
        DataSourceVmwareVCenterUpdate: {
            /**
             * Is Certificate Validation Enabled
             * @default true
             */
            is_certificate_validation_enabled: boolean;
            /**
             * Is Asset Collection Enabled
             * @default true
             */
            is_asset_collection_enabled: boolean;
            /**
             * Asset Collection Interval
             * @default 5
             */
            asset_collection_interval: number;
            /**
             * Priority
             * @default 5
             */
            priority: number;
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Description */
            description?: string | null;
            /**
             * Is Enabled
             * @default false
             */
            is_enabled: boolean;
            /** Credential Profile Id */
            credential_profile_id?: string | null;
        };
        /**
         * ExecutionTime
         * @description The execution time metrics for a query operation.
         */
        ExecutionTime: {
            /** Name */
            name: string;
            /** Target */
            target: string;
            /** Duration */
            duration: number;
        };
        /**
         * FirewallRuleEntity
         * @description Represents entity in firewall rule configurations.
         */
        FirewallRuleEntity: {
            /** Name */
            name: string;
            /** Value */
            value: string;
        };
        /**
         * GeneralSettingsResponse
         * @description API output model for general settings.
         */
        GeneralSettingsResponse: {
            /**
             * Check For Updates
             * @description Indicates if the application should automatically check for updates
             * @default true
             */
            check_for_updates: boolean;
            /**
             * Stale Asset Retention
             * @description The retention period (in days) for stale assets before they are purged
             * @default 30
             */
            stale_asset_retention: number;
        };
        /**
         * GeneralSettingsUpdate
         * @description Data model for updating general settings.
         */
        GeneralSettingsUpdate: {
            /**
             * Check For Updates
             * @description Indicates if the application should automatically check for updates
             * @default true
             */
            check_for_updates: boolean;
            /**
             * Stale Asset Retention
             * @description The retention period (in days) for stale assets before they are purged
             * @default 30
             */
            stale_asset_retention: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * IdentityProviderLdapCreate
         * @description Data model for creating an LDAP identity provider.
         */
        IdentityProviderLdapCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Password
             * Format: password
             */
            password: string;
            /** User */
            user: string;
            /** Cn */
            cn: string;
            /** Search Filter */
            search_filter: string;
            /** Base */
            base: string;
            /** Is Connection Secure */
            is_connection_secure: boolean;
            /** Is Certificate Validation Enabled */
            is_certificate_validation_enabled: boolean;
            /** Port */
            port: number;
            /** Server */
            server: string;
        };
        /**
         * IdentityProviderLdapResponse
         * @description API output model for an LDAP identity provider.
         */
        IdentityProviderLdapResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "LDAP";
            /** Is Enabled */
            is_enabled: boolean;
            /** Is Deletable */
            is_deletable: boolean;
            /**
             * Password
             * Format: password
             */
            password: string;
            /** User */
            user: string;
            /** Cn */
            cn: string;
            /** Search Filter */
            search_filter: string;
            /** Base */
            base: string;
            /** Is Connection Secure */
            is_connection_secure: boolean;
            /** Is Certificate Validation Enabled */
            is_certificate_validation_enabled: boolean;
            /** Port */
            port: number;
            /** Server */
            server: string;
        };
        /**
         * IdentityProviderLdapUpdate
         * @description Data model for updating an LDAP identity provider.
         */
        IdentityProviderLdapUpdate: {
            /** Description */
            description?: string | null;
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Password
             * Format: password
             */
            password: string;
            /** User */
            user: string;
            /** Cn */
            cn: string;
            /** Search Filter */
            search_filter: string;
            /** Base */
            base: string;
            /** Is Connection Secure */
            is_connection_secure: boolean;
            /** Is Certificate Validation Enabled */
            is_certificate_validation_enabled: boolean;
            /** Port */
            port: number;
            /** Server */
            server: string;
        };
        /**
         * IdentityProviderLocalResponse
         * @description API output model for a Local identity provider.
         */
        IdentityProviderLocalResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            entity_type: "LOCAL";
            /** Is Enabled */
            is_enabled: boolean;
            /** Is Deletable */
            is_deletable: boolean;
        };
        /**
         * IdentityProviderLocalUpdate
         * @description Data model for updating a Local identity provider.
         */
        IdentityProviderLocalUpdate: {
            /**
             * Is Enabled
             * @default true
             */
            is_enabled: boolean;
        };
        /**
         * IdentityProviderResponse
         * @description Generic API output model for identity providers.
         */
        IdentityProviderResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Entity Type */
            entity_type: string;
            /** Is Enabled */
            is_enabled: boolean;
            /** Is Deletable */
            is_deletable: boolean;
        };
        /**
         * MetricsActivityResponse
         * @description API output model for activity metrics.
         */
        MetricsActivityResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Time
             * Format: date-time
             */
            time: string;
            /** Category */
            category: string;
            /** Action */
            action: string;
            /** User Id */
            user_id?: string | null;
            /** Details */
            details?: string | null;
            user?: components["schemas"]["Reference"] | null;
        };
        /**
         * MetricsTaskResponse
         * @description API output model for task metrics.
         */
        MetricsTaskResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Time
             * Format: date-time
             */
            time: string;
            /** Name */
            name: string;
            /**
             * Task
             * @description The internal or programmatic identifier for the task
             */
            task: string;
            /**
             * Origin
             * @description The origin or source of the task, such as module or data source id
             */
            origin?: string | null;
            /**
             * Message
             * @description Any message or log related to the task execution, such as error or success details
             */
            message?: string | null;
            /**
             * Status
             * @description The status of the task, indicating whether it succeeded, failed
             */
            status: string;
            /**
             * Execution Time
             * @description The total time taken to execute the task in seconds
             */
            execution_time: number;
            source?: components["schemas"]["Reference"] | null;
        };
        /**
         * NewPassword
         * @description New password API model.
         *
         *     This model is used to change user credentials.
         */
        NewPassword: {
            /**
             * Current Password
             * Format: password
             */
            current_password: string;
            /**
             * New Password
             * Format: password
             */
            new_password: string;
            /**
             * Repeat Password
             * Format: password
             */
            repeat_password: string;
        };
        /**
         * PolymorphicAssetResponse
         * @description Polymorphic API Response model. Parses the correct model using the discriminator field.
         */
        PolymorphicAssetResponse: components["schemas"]["AssetHostResponse"] | components["schemas"]["AssetFirewallRuleResponse"] | components["schemas"]["AssetNetworkResponse"] | components["schemas"]["AssetServiceResponse"] | components["schemas"]["AssetUserResponse"];
        /**
         * PolymorphicDataSourceResponse
         * @description Polymorphic API Response model. Parses the correct model using the discriminator field.
         */
        PolymorphicDataSourceResponse: components["schemas"]["DataSourceAriaLogsResponse"] | components["schemas"]["DataSourceAriaNetworksResponse"] | components["schemas"]["DataSourceDemoResponse"] | components["schemas"]["DataSourceIvantiITSMResponse"] | components["schemas"]["DataSourceQRadarResponse"] | components["schemas"]["DataSourceVmwareVCenterResponse"] | components["schemas"]["DataSourceVmwareNSXResponse"];
        /**
         * PolymorphicIdentityProviderResponse
         * @description Polymorphic API response model. Parses the correct model using the discriminator field.
         */
        PolymorphicIdentityProviderResponse: components["schemas"]["IdentityProviderLocalResponse"] | components["schemas"]["IdentityProviderLdapResponse"];
        /**
         * QueryError
         * @description Error that occurred during query execution.
         */
        QueryError: {
            /** Message */
            message: string;
            /** Name */
            name: string;
        };
        /**
         * QueryFilter
         * @description Version of the filter that the user submits.
         */
        QueryFilter: {
            /** Value */
            value: string | string[];
            /** Expression */
            expression: string;
            /** Field */
            field: string;
            /**
             * Entity Type
             * @default log
             * @enum {string}
             */
            entity_type: "host" | "log" | "firewall_rule" | "security_group" | "asset_user";
        };
        /**
         * QueryMetadata
         * @description Contains metadata about query execution.
         */
        QueryMetadata: {
            /**
             * Execution Durations
             * @default []
             */
            execution_durations: components["schemas"]["ExecutionTime"][];
        };
        /**
         * RecordResponse
         * @description Returned by the API with resolved asset references.
         */
        RecordResponse: {
            /** Timestamp */
            timestamp?: number | null;
            /**
             * Source Ip
             * Format: ipvanyaddress
             */
            source_ip: string;
            /**
             * Destination Ip
             * Format: ipvanyaddress
             */
            destination_ip: string;
            /** Port */
            port: string;
            /** Protocol */
            protocol: string;
            /** Action */
            action: string;
            /** Log Source */
            log_source?: string | null;
            /**
             * Data Source
             * @description Name of data source
             */
            data_source?: string | null;
            source_device?: components["schemas"]["AssetHostResponse"] | null;
            destination_device?: components["schemas"]["AssetHostResponse"] | null;
            firewall_rule?: components["schemas"]["AssetFirewallRuleResponse"] | null;
            /** Firewall Rule Id */
            firewall_rule_id?: string | null;
            user?: components["schemas"]["AssetUserResponse"] | null;
            /** Username */
            username?: string | null;
            /** Vrf */
            vrf?: string | null;
            /** Session Message */
            session_message?: string | null;
            /**
             * Source Security Groups
             * @default []
             */
            source_security_groups: unknown[];
            /**
             * Destination Security Groups
             * @default []
             */
            destination_security_groups: unknown[];
            /**
             * Source Networks
             * @default []
             */
            source_networks: components["schemas"]["AssetNetworkResponse"][];
            /**
             * Destination Networks
             * @default []
             */
            destination_networks: components["schemas"]["AssetNetworkResponse"][];
            /** Application */
            application?: string | null;
            /** Client To Server Bytes */
            client_to_server_bytes?: number | null;
            /** Server To Client Bytes */
            server_to_client_bytes?: number | null;
            /** Source Interface */
            source_interface?: string | null;
            /** Destination Interface */
            destination_interface?: string | null;
            /** Source Zone */
            source_zone?: string | null;
            /** Destination Zone */
            destination_zone?: string | null;
            /** Manager */
            manager?: string | null;
        };
        /**
         * Reference
         * @description Data model representing a reference to an entity.
         */
        Reference: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Entity Type */
            entity_type: string;
            /** Name */
            name?: string | null;
        };
        /**
         * RoleResponse
         * @description API output model for user role.
         */
        RoleResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Is Deletable */
            is_deletable: boolean;
            /** Scopes */
            scopes: string;
            /**
             * Scope List
             * @description Get the list of scopes for the role.
             */
            readonly scope_list: string[];
        };
        /**
         * SearchCapableDataSource
         * @description Represents a data source that supports search capabilities.
         */
        SearchCapableDataSource: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /**
         * SearchQueryRequest
         * @description A logs search query request (API request).
         */
        SearchQueryRequest: {
            time_interval: components["schemas"]["TimeInterval"];
            /** Log Count */
            log_count: number;
            /**
             * Sources
             * @description Empty list means search in all active sources.
             */
            sources: string[];
            /** Filter */
            filter: components["schemas"]["QueryFilter"][];
        };
        /**
         * SearchQueryResponse
         * @description Data model returned by the API to the user.
         */
        SearchQueryResponse: {
            meta: components["schemas"]["QueryMetadata"];
            /**
             * Results
             * @default []
             */
            results: components["schemas"]["RecordResponse"][];
            /**
             * Errors
             * @default []
             */
            errors: components["schemas"]["QueryError"][];
            /**
             * Is Success
             * @description Whether at least one data source successfully returned results. Useful for displaying error messages to the user.
             * @default true
             */
            is_success: boolean;
        };
        /**
         * SecuritySettingsResponse
         * @description API output model for security settings.
         */
        SecuritySettingsResponse: {
            /**
             * Auth Jwt Lifespan
             * @default 15
             */
            auth_jwt_lifespan: number;
            /**
             * Refresh Jwt Lifespan
             * @default 60
             */
            refresh_jwt_lifespan: number;
        };
        /**
         * SecuritySettingsUpdate
         * @description Data model for updating security settings.
         */
        SecuritySettingsUpdate: {
            /**
             * Auth Jwt Lifespan
             * @default 15
             */
            auth_jwt_lifespan: number;
            /**
             * Refresh Jwt Lifespan
             * @default 60
             */
            refresh_jwt_lifespan: number;
        };
        /**
         * SetupSettingsResponse
         * @description API output model for setup settings.
         */
        SetupSettingsResponse: {
            /**
             * Is Initial User Created
             * @default false
             */
            is_initial_user_created: boolean;
            /**
             * Is Setup Complete
             * @description Check if the setup is complete.
             */
            readonly is_setup_complete: boolean;
        };
        /**
         * SetupUser
         * @description Represents an initial app user.
         */
        SetupUser: {
            /** Email */
            email: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /** Name */
            name: string;
        };
        /**
         * StateSettingsResponse
         * @description API output model for the state of the app.
         */
        StateSettingsResponse: {
            /** Version */
            version: string;
            /**
             * Broker
             * @description Indicates whether the task query broker is used
             */
            broker: boolean;
            /**
             * Environment
             * @description The current application environment (e.g., dev, test, prod)
             */
            environment: string;
        };
        /**
         * TaskQueueResponse
         * @description API output model for task queue metrics.
         */
        TaskQueueResponse: {
            /**
             * Size
             * @description The number of tasks currently in the queue
             */
            size: number;
        };
        /**
         * TimeInterval
         * @description Represents a time interval with start and end timestamps, in seconds.
         *
         *     If `end_time` is set to 0, it is updated to the current Unix timestamp.
         *     The `start_time` is then updated to be relative to the new `end_time`, calculated as
         *     `end_time - original_start_time`.
         */
        TimeInterval: {
            /**
             * Start Time
             * @description Unix timestamp
             */
            start_time: number;
            /**
             * End Time
             * @description Unix timestamp
             */
            end_time: number;
        };
        /**
         * UserCreate
         * @description Data model for creating a new app user.
         */
        UserCreate: {
            /** Name */
            name: string;
            /** Email */
            email: string;
            /**
             * Provider Id
             * Format: uuid
             */
            provider_id: string;
            /** Password */
            password?: string | null;
            /** Password Confirm */
            password_confirm?: string | null;
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Role Id
             * Format: uuid
             */
            role_id: string;
        };
        /**
         * UserResponse
         * @description API output model for a user.
         */
        UserResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Email */
            email: string;
            /**
             * Provider Id
             * Format: uuid
             */
            provider_id: string;
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Role Id
             * Format: uuid
             */
            role_id: string;
            role?: components["schemas"]["RoleResponse"] | null;
            provider?: components["schemas"]["IdentityProviderResponse"] | null;
        };
        /**
         * UserUpdate
         * @description Data model for updating app user information.
         */
        UserUpdate: {
            /** Name */
            name: string;
            /** Password */
            password?: string | null;
            /** Password Confirm */
            password_confirm?: string | null;
            /** Is Enabled */
            is_enabled: boolean;
            /**
             * Role Id
             * Format: uuid
             */
            role_id: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AccessTokenCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_AccessTokenCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessToken"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_auth_token_api_auth_token_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_auth_token_api_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessToken"];
                };
            };
        };
    };
    change_password_api_auth_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_api_users_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"][];
                };
            };
        };
    };
    add_user_api_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_api_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    get_user_api_users__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_api_users__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_api_users__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_roles_api_roles_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
        };
    };
    get_role_api_roles__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_providers_api_providers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolymorphicIdentityProviderResponse"][];
                };
            };
        };
    };
    list_providers_local_api_providers_local_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdentityProviderLocalResponse"][];
                };
            };
        };
    };
    get_provider_local_api_providers_local__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdentityProviderLocalResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_provider_local_api_providers_local__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdentityProviderLocalUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_provider_local_api_providers_local__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    IdentityProviderLdapValidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_IdentityProviderLdapValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_providers_ldap_api_providers_ldap_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdentityProviderLdapResponse"][];
                };
            };
        };
    };
    add_providers_ldap_api_providers_ldap_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdentityProviderLdapCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_provider_ldap_api_providers_ldap__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdentityProviderLdapResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_provider_ldap_api_providers_ldap__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdentityProviderLdapUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_provider_ldap_api_providers_ldap__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_state_api_settings_state_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StateSettingsResponse"];
                };
            };
        };
    };
    get_general_settings_api_settings_general_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeneralSettingsResponse"];
                };
            };
        };
    };
    update_general_settings_api_settings_general_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GeneralSettingsUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_security_settings_api_settings_security_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SecuritySettingsResponse"];
                };
            };
        };
    };
    update_security_settings_api_settings_security_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SecuritySettingsUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    state_api_setup_state_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetupSettingsResponse"];
                };
            };
        };
    };
    setup_user_api_setup_user_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetupUser"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sync_assets_api_data_sources_sync_get: {
        parameters: {
            query: {
                source_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_datasources_api_data_sources_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolymorphicDataSourceResponse"][];
                };
            };
        };
    };
    list_aria_logs_api_data_sources_aria_logs_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceAriaLogsResponse"][];
                };
            };
        };
    };
    add_aria_logs_api_data_sources_aria_logs_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceAriaLogsCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceAriaLogsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_aria_logs_api_data_sources_aria_logs__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceAriaLogsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_aria_logs_api_data_sources_aria_logs__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceAriaLogsUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_aria_logs_api_data_sources_aria_logs__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    DataSourceAriaLogsValidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_DataSourceAriaLogsValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_aria_networks_api_data_sources_aria_networks_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceAriaNetworksResponse"][];
                };
            };
        };
    };
    add_aria_networks_api_data_sources_aria_networks_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceAriaNetworksCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_aria_networks_api_data_sources_aria_networks__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceAriaNetworksResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_aria_networks_api_data_sources_aria_networks__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceAriaNetworksUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_aria_networks_api_data_sources_aria_networks__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    DataSourceAriaNetworksValidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_DataSourceAriaNetworksValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_vmware_nsx_api_data_sources_vmware_nsx_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceVmwareNSXResponse"][];
                };
            };
        };
    };
    add_vmware_nsx_api_data_sources_vmware_nsx_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceVmwareNSXCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vmware_nsx_api_data_sources_vmware_nsx__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceVmwareNSXResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_vmware_nsx_api_data_sources_vmware_nsx__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceVmwareNSXUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_vmware_nsx_api_data_sources_vmware_nsx__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    DataSourceVmwareNSXValidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_DataSourceVmwareNSXValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_vmware_vcenter_api_data_sources_vmware_vcenter_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceVmwareVCenterResponse"][];
                };
            };
        };
    };
    add_vmware_vcenter_api_data_sources_vmware_vcenter_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceVmwareVCenterCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_vmware_vcenter_api_data_sources_vmware_vcenter__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceVmwareVCenterResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_vmware_vcenter_api_data_sources_vmware_vcenter__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceVmwareVCenterUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_vmware_vcenter_api_data_sources_vmware_vcenter__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    DataSourceVmwareVCenterValidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_DataSourceVmwareVCenterValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_demo_api_data_sources_demo__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceDemoResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_ivanti_itsm_api_data_sources_ivanti_itsm_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceIvantiITSMResponse"][];
                };
            };
        };
    };
    add_ivanti_itsm_api_data_sources_ivanti_itsm_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceIvantiITSMCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ivanti_itsm_api_data_sources_ivanti_itsm__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceIvantiITSMResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_ivanti_itsm_api_data_sources_ivanti_itsm__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceIvantiITSMUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_ivanti_itsm_api_data_sources_ivanti_itsm__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    DataSourceIvantiITSMValidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_DataSourceIvantiITSMValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_qradar_api_data_sources_qradar_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceQRadarResponse"][];
                };
            };
        };
    };
    add_qradar_api_data_sources_qradar_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceQRadarCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_qradar_api_data_sources_qradar__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceQRadarResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_qradar_api_data_sources_qradar__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSourceQRadarUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_qradar_api_data_sources_qradar__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    DataSourceQRadarValidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_DataSourceQRadarValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_credential_profiles_api_credential_profiles_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CredentialProfileResponse"][];
                };
            };
        };
    };
    add_credential_profile_api_credential_profiles_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CredentialProfileCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CredentialProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_credential_profile_api_credential_profiles__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CredentialProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_credential_profile_api_credential_profiles__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CredentialProfileUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_credential_profile_api_credential_profiles__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logs_search_api_logs_search_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchQueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchQueryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    log_sources_api_logs_sources_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchCapableDataSource"][];
                };
            };
        };
    };
    get_hosts_api_assets_hosts_get: {
        parameters: {
            query?: {
                /** @description Limit the number of items per page */
                limit?: number | null;
                /** @description Skip the first N items */
                offset?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetHostResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_host_api_assets_hosts_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssetHostCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetHostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_host_api_assets_hosts__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetHostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_host_api_assets_hosts__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssetHostUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_host_api_assets_hosts__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_firewall_rules_api_assets_firewall_rules_get: {
        parameters: {
            query?: {
                /** @description Limit the number of items per page */
                limit?: number | null;
                /** @description Skip the first N items */
                offset?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetFirewallRuleResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_firewall_rule_api_assets_firewall_rules__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetFirewallRuleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_networks_api_assets_networks_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetNetworkResponse"][];
                };
            };
        };
    };
    add_network_api_assets_networks_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssetNetworkCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetNetworkResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_network_api_assets_networks__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetNetworkResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_network_api_assets_networks__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssetNetworkUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_network_api_assets_networks__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_services_api_assets_services_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetServiceResponse"][];
                };
            };
        };
    };
    add_service_api_assets_services_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssetServiceCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetServiceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_service_api_assets_services__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetServiceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_service_api_assets_services__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssetServiceUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_service_api_assets_services__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_api_assets_users_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetUserResponse"][];
                };
            };
        };
    };
    get_user_api_assets_users__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetUserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resolve_references_api_assets_references_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Reference"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolymorphicAssetResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_metrics_api_metrics_tasks_get: {
        parameters: {
            query: {
                origin?: string | null;
                status?: ("error" | "success") | null;
                start_time: number;
                end_time: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsTaskResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_queue_api_metrics_tasks_queue_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskQueueResponse"];
                };
            };
        };
    };
    get_activity_metrics_api_metrics_activity_get: {
        parameters: {
            query: {
                user_id?: string | null;
                category?: string | null;
                start_time: number;
                end_time: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsActivityResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
